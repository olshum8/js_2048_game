{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.rows = 4;\n        this.columns = 4;\n        this.emptyCells = [];\n        this.status = \"idle\";\n    }\n    checkWin() {\n        for(let r = 0; r < this.rows; r++){\n            for(let c = 0; c < this.columns; c++)if (this.board[r][c] === 2048) this.status = \"win\";\n        }\n    }\n    checkAvailableMoves() {\n        for(let r = 0; r < this.rows; r++)for(let c = 0; c < this.columns; c++){\n            if (this.board[r][c] === 0) return true;\n            if (r < this.rows - 1 && this.board[r][c] === this.board[r + 1][c]) return true;\n            if (c < this.columns - 1 && this.board[r][c] === this.board[r][c + 1]) return true;\n        }\n        return false;\n    }\n    getEmptyCells() {\n        this.emptyCells = [];\n        for(let r = 0; r < this.rows; r++){\n            for(let c = 0; c < this.columns; c++)if (this.board[r][c] === 0) this.emptyCells.push([\n                r,\n                c\n            ]);\n        }\n        return this.emptyCells;\n    }\n    setRandomNum() {\n        this.getEmptyCells();\n        if (this.emptyCells.length === 0) {\n            if (!this.checkAvailableMoves()) this.status = \"lose\";\n            return;\n        }\n        const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n        const [r, c] = this.emptyCells[randomIndex];\n        this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n        this.checkWin();\n        if (!this.checkAvailableMoves()) this.status = \"lose\";\n    }\n    slide(row) {\n        function removeZeroes() {\n            return row.filter((num)=>num !== 0);\n        }\n        // eslint-disable-next-line no-param-reassign\n        row = removeZeroes(row);\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        // eslint-disable-next-line no-param-reassign\n        row = removeZeroes(row);\n        while(row.length < this.columns)row.push(0);\n        return row;\n    }\n    isChanged(previousState) {\n        const currentState = this.getState();\n        for(let r = 0; r < currentState.length; r++)for(let c = 0; c < currentState[r].length; c++){\n            if (currentState[r][c] !== previousState[r][c]) return true;\n        }\n        return false;\n    }\n    moveLeft() {\n        const previousState = this.getState().map((row)=>[\n                ...row\n            ]);\n        for(let r = 0; r < this.rows; r++){\n            let row = this.board[r];\n            row = this.slide(row);\n            this.board[r] = row;\n        }\n        if (!this.isChanged(previousState)) return;\n        this.setRandomNum();\n    }\n    moveRight() {\n        const previousState = this.getState().map((row)=>[\n                ...row\n            ]);\n        for(let r = 0; r < this.rows; r++){\n            let row = this.board[r];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.board[r] = row;\n        }\n        if (!this.isChanged(previousState)) return;\n        this.setRandomNum();\n    }\n    moveUp() {\n        const previousState = this.getState().map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.columns; c++){\n            let row = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            row = this.slide(row);\n            this.board[0][c] = row[0];\n            this.board[1][c] = row[1];\n            this.board[2][c] = row[2];\n            this.board[3][c] = row[3];\n        }\n        if (!this.isChanged(previousState)) return;\n        this.setRandomNum();\n    }\n    moveDown() {\n        const previousState = this.getState().map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.columns; c++){\n            let row = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.board[0][c] = row[0];\n            this.board[1][c] = row[1];\n            this.board[2][c] = row[2];\n            this.board[3][c] = row[3];\n        }\n        if (!this.isChanged(previousState)) return;\n        this.setRandomNum();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.setRandomNum();\n        this.setRandomNum();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\"#start-button\");\nconst $09e991522ca7e64e$var$restartButton = document.querySelector(\"#restart-button\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message.message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message.message-lose\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message.message-start\");\nfunction $09e991522ca7e64e$var$updateUI() {\n    while($09e991522ca7e64e$var$gameBoard.firstChild)$09e991522ca7e64e$var$gameBoard.removeChild($09e991522ca7e64e$var$gameBoard.firstChild);\n    const gameState = $09e991522ca7e64e$var$game.getState();\n    for (const row of gameState){\n        const tr = document.createElement(\"tr\");\n        tr.classList.add(\"field-row\");\n        for (const cell of row){\n            const td = document.createElement(\"td\");\n            td.classList.add(\"field-cell\");\n            if (cell !== 0) {\n                td.textContent = cell;\n                td.classList.add(`field-cell--${cell}`);\n            }\n            tr.appendChild(td);\n        }\n        $09e991522ca7e64e$var$gameBoard.appendChild(tr);\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n    // check the game status(win,lose,playing)\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    switch(gameStatus){\n        case \"playing\":\n            document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case \"win\":\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n            $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n            break;\n        case \"idle\":\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n            $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n            break;\n    }\n}\n// END Update UI\n// handle move\nfunction $09e991522ca7e64e$var$handleMove(evnt) {\n    const KEY = {\n        UP: \"ArrowUp\",\n        DOWN: \"ArrowDown\",\n        LEFT: \"ArrowLeft\",\n        RIGHT: \"ArrowRight\"\n    };\n    switch(evnt.key){\n        case KEY.UP:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case KEY.DOWN:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case KEY.LEFT:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case KEY.RIGHT:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$startButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$restartButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$restartButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n}\nif ($09e991522ca7e64e$var$game.getStatus() === \"playing\") document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\n$09e991522ca7e64e$var$updateUI();\n\n\n//# sourceMappingURL=index.1621cbc9.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst gameBoard = document.querySelector('.game-field');\nconst score = document.querySelector('.game-score');\nconst startButton = document.querySelector('#start-button');\nconst restartButton = document.querySelector('#restart-button');\nconst winMessage = document.querySelector('.message.message-win');\nconst loseMessage = document.querySelector('.message.message-lose');\nconst startMessage = document.querySelector('.message.message-start');\n\nfunction updateUI() {\n  while (gameBoard.firstChild) {\n    gameBoard.removeChild(gameBoard.firstChild);\n  }\n\n  const gameState = game.getState();\n\n  for (const row of gameState) {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row');\n\n    for (const cell of row) {\n      const td = document.createElement('td');\n\n      td.classList.add('field-cell');\n\n      if (cell !== 0) {\n        td.textContent = cell;\n        td.classList.add(`field-cell--${cell}`);\n      }\n      tr.appendChild(td);\n    }\n    gameBoard.appendChild(tr);\n\n    score.textContent = game.getScore();\n  }\n\n  // check the game status(win,lose,playing)\n\n  const gameStatus = game.getStatus();\n\n  switch (gameStatus) {\n    case 'playing':\n      document.addEventListener('keydown', handleMove);\n      startMessage.classList.add('hidden');\n      break;\n    case 'win':\n      document.removeEventListener('keydown', handleMove);\n      winMessage.classList.remove('hidden');\n      break;\n    case 'lose':\n      document.removeEventListener('keydown', handleMove);\n      loseMessage.classList.remove('hidden');\n      break;\n    case 'idle':\n      document.removeEventListener('keydown', handleMove);\n      startMessage.classList.remove('hidden');\n      break;\n  }\n}\n\n// END Update UI\n\n// handle move\nfunction handleMove(evnt) {\n  const KEY = {\n    UP: 'ArrowUp',\n    DOWN: 'ArrowDown',\n    LEFT: 'ArrowLeft',\n    RIGHT: 'ArrowRight',\n  };\n\n  switch (evnt.key) {\n    case KEY.UP:\n      game.moveUp();\n      break;\n\n    case KEY.DOWN:\n      game.moveDown();\n      break;\n\n    case KEY.LEFT:\n      game.moveLeft();\n      break;\n\n    case KEY.RIGHT:\n      game.moveRight();\n      break;\n  }\n\n  updateUI();\n}\n\nfunction startGame() {\n  startButton.classList.add('hidden');\n  startMessage.classList.add('hidden');\n  restartButton.classList.remove('hidden');\n  game.start();\n  updateUI();\n}\n\nfunction restartGame() {\n  restartButton.classList.add('hidden');\n  startButton.classList.remove('hidden');\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  startMessage.classList.remove('hidden');\n  game.restart();\n\n  updateUI();\n}\n\nif (game.getStatus() === 'playing') {\n  document.addEventListener('keydown', handleMove);\n}\nstartButton.addEventListener('click', startGame);\nrestartButton.addEventListener('click', restartGame);\n\nupdateUI();\n","'use strict';\n\nclass Game {\n  constructor() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.rows = 4;\n    this.columns = 4;\n    this.emptyCells = [];\n    this.status = 'idle';\n  }\n\n  checkWin() {\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        if (this.board[r][c] === 2048) {\n          this.status = 'win';\n        }\n      }\n    }\n  }\n\n  checkAvailableMoves() {\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (r < this.rows - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n\n        if (c < this.columns - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getEmptyCells() {\n    this.emptyCells = [];\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        if (this.board[r][c] === 0) {\n          this.emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    return this.emptyCells;\n  }\n\n  setRandomNum() {\n    this.getEmptyCells();\n\n    if (this.emptyCells.length === 0) {\n      if (!this.checkAvailableMoves()) {\n        this.status = 'lose';\n      }\n\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n\n    const [r, c] = this.emptyCells[randomIndex];\n\n    this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n\n    this.checkWin();\n\n    if (!this.checkAvailableMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  slide(row) {\n    function removeZeroes() {\n      return row.filter((num) => num !== 0);\n    }\n    // eslint-disable-next-line no-param-reassign\n    row = removeZeroes(row);\n\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    row = removeZeroes(row);\n\n    while (row.length < this.columns) {\n      row.push(0);\n    }\n\n    return row;\n  }\n\n  isChanged(previousState) {\n    const currentState = this.getState();\n\n    for (let r = 0; r < currentState.length; r++) {\n      for (let c = 0; c < currentState[r].length; c++) {\n        if (currentState[r][c] !== previousState[r][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    const previousState = this.getState().map((row) => [...row]);\n\n    for (let r = 0; r < this.rows; r++) {\n      let row = this.board[r];\n\n      row = this.slide(row);\n      this.board[r] = row;\n    }\n\n    if (!this.isChanged(previousState)) {\n      return;\n    }\n\n    this.setRandomNum();\n  }\n\n  moveRight() {\n    const previousState = this.getState().map((row) => [...row]);\n\n    for (let r = 0; r < this.rows; r++) {\n      let row = this.board[r];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n      this.board[r] = row;\n    }\n\n    if (!this.isChanged(previousState)) {\n      return;\n    }\n\n    this.setRandomNum();\n  }\n\n  moveUp() {\n    const previousState = this.getState().map((row) => [...row]);\n\n    for (let c = 0; c < this.columns; c++) {\n      let row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      row = this.slide(row);\n      this.board[0][c] = row[0];\n      this.board[1][c] = row[1];\n      this.board[2][c] = row[2];\n      this.board[3][c] = row[3];\n    }\n\n    if (!this.isChanged(previousState)) {\n      return;\n    }\n    this.setRandomNum();\n  }\n\n  moveDown() {\n    const previousState = this.getState().map((row) => [...row]);\n\n    for (let c = 0; c < this.columns; c++) {\n      let row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n      this.board[0][c] = row[0];\n      this.board[1][c] = row[1];\n      this.board[2][c] = row[2];\n      this.board[3][c] = row[3];\n    }\n\n    if (!this.isChanged(previousState)) {\n      return;\n    }\n    this.setRandomNum();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.setRandomNum();\n    this.setRandomNum();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","board","score","rows","columns","emptyCells","status","checkWin","r","c","checkAvailableMoves","getEmptyCells","push","setRandomNum","length","randomIndex","Math","floor","random","slide","row","removeZeroes","filter","num","i","isChanged","previousState","currentState","getState","moveLeft","map","moveRight","reverse","moveUp","moveDown","getScore","getStatus","start","restart","__esModule","default","$09e991522ca7e64e$var$gameBoard","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$updateUI","firstChild","removeChild","tr","createElement","cell","classList","add","td","textContent","appendChild","addEventListener","$09e991522ca7e64e$var$handleMove","removeEventListener","remove","evnt","KEY","UP","DOWN","LEFT","RIGHT","key"],"version":3,"file":"index.1621cbc9.js.map"}